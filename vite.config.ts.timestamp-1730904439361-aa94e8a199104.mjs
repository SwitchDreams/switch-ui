// vite.config.ts
import { resolve } from "node:path";
import react from "file:///home/vhvictor1/Code/SwitchDreams/switch-ui/node_modules/@vitejs/plugin-react/dist/index.mjs";
import { PluginPure } from "file:///home/vhvictor1/Code/SwitchDreams/switch-ui/node_modules/rollup-plugin-pure/dist/index.mjs";
import { defineConfig } from "file:///home/vhvictor1/Code/SwitchDreams/switch-ui/node_modules/vite/dist/node/index.js";
import dts from "file:///home/vhvictor1/Code/SwitchDreams/switch-ui/node_modules/vite-plugin-dts/dist/index.mjs";
import { viteStaticCopy } from "file:///home/vhvictor1/Code/SwitchDreams/switch-ui/node_modules/vite-plugin-static-copy/dist/index.js";
import tsConfigPaths from "file:///home/vhvictor1/Code/SwitchDreams/switch-ui/node_modules/vite-tsconfig-paths/dist/index.js";

// package.json
var peerDependencies = {
  react: "^18.2.0",
  "react-dom": "^18.2.0"
};
var dependencies = {
  "@eslint/js": "^9.14.0",
  "@floating-ui/react": "^0.26.27",
  "@floating-ui/react-dom": "^2.1.2",
  "@headlessui/react": "^2.2.0",
  "@headlessui/tailwindcss": "^0.2.1",
  "@heroicons/react": "^2.1.5",
  "class-variance-authority": "^0.7.0",
  jackspeak: "4.0.2",
  "react-input-mask": "^2.0.4",
  "react-select": "^5.8.2",
  "strip-ansi": "7.1.0",
  "tailwind-merge": "^2.5.4",
  "typescript-eslint": "^8.13.0"
};

// vite.config.ts
var vite_config_default = defineConfig(({ mode }) => ({
  define: {
    "process.env.NODE_ENV": JSON.stringify(mode)
  },
  plugins: [
    react(),
    tsConfigPaths(),
    viteStaticCopy({
      targets: [
        {
          src: "src/tailwind.plugin.ts",
          dest: ""
        }
      ]
    }),
    dts({
      include: ["src/components/", "src/index.ts"],
      exclude: ["**/*.test.tsx", "**/*.stories.tsx"]
    })
  ],
  build: {
    lib: {
      entry: resolve("src", "index.ts"),
      name: "SwitchUI",
      formats: ["es"],
      fileName: (format) => `ui.${format}.js`
    },
    rollupOptions: {
      plugins: [
        PluginPure({
          sourcemap: true,
          functions: [
            "React.createElement",
            "React.forwardRef",
            // Used for heroicons
            "forwardRefWithAs",
            "cva"
          ]
        })
      ],
      external: [
        ...Object.keys(peerDependencies),
        ...Object.keys(dependencies),
        "react-select/async",
        "react/jsx-runtime"
      ]
    },
    sourcemap: true
  },
  test: {
    environment: "jsdom",
    setupFiles: ["./src/tests/setup.ts"],
    testMatch: ["./tests/**/*.test.tsx"],
    globals: true
  }
}));
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
